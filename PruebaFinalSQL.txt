-- 1. Crea el modelo (revisa bien cuál es el tipo de relación antes de crearlo), respeta las
-- claves primarias, foráneas y tipos de datos. (1 punto)

create table peliculas (
    id serial primary key,
    nombre varchar(200) not null,
    año int not null
);

create table tags(
    id serial primary key,
    tags varchar(32) not null
);

create table pelicula_tags(
    id serial primary key,
    pelicula_id int,
    tags_id int
);

select * from peliculas;
select * from tags;
select * from pelicula_tags;

-- 2. Inserta 5 películas y 5 tags, la primera película tiene que tener 3 tags asociados, la
-- segunda película debe tener dos tags asociados. (1 punto)

insert into peliculas (nombre, año) values
    ('Oblivion: El tiempo del olvido', 2013),
    ('Como si fuera la primera vez', 2004),
    ('Rapidos y Furiosos: Hobbs & Shaw', 2019 ),
    ('Mas alla de la Montaña', 2017),
    ('Legalmente Rubia', 2001)
;

insert into tags (tags) values 
    ('ciencia ficcion'),
    ('Romantica'),
    ('Accion'),
    ('Comedia'),
    ('Drama')
;

insert into pelicula_tags (pelicula_id, tags_id) values (1, 1), (1,3), (1, 5), (2, 4), (2, 5), (4, 1), (5,2);

select p.id, p.nombre, pt.pelicula_id, pt.tags_id, t.tag from peliculas p inner join pelicula_tags pt on p.id=pt.pelicula_id inner join tags t on t.id=pt.tags_id;


-- 3. Cuenta la cantidad de tags que tiene cada película. Si una película no tiene tags debe mostrar 0. (1 punto)

select * from peliculas p inner join pelicula_tags pt on p.id=pt.pelicula_id where p.id=pt.pelicula_id;
select pelicula_id, count(tags_id) as total_tags from pelicula_tags group by pelicula_id; -- muestra la cantidad de tags agrupado por pelicula

select p.id, p.nombre, coalesce(total_tags, 0) as cant_de_tags from peliculas p left join (select pelicula_id, count(tags_id) as total_tags from pelicula_tags group by pelicula_id) b on p.id=b.pelicula_id;



-----------------segundo caso-------------------

-- 4. Crea las tablas respetando los nombres, tipos, claves primarias y foráneas y tipos de datos. (1 punto)

create table preguntas (
    id serial primary key,
    pregunta varchar not null,
    respuesta_correcta varchar not null
);

create table usuarios(
    id serial primary key,
    nombre varchar not null,
    edad int not null
);

create table respuestas(
    id serial primary key,
    respuesta varchar,
    usuario_id int,
    pregunta_id int
);
-- agregar la foreign key fuera de la tabla (si se olvido agregar en la tabla)

alter table respuestas add foreign key (usuario_id) references usuarios(id);
alter table respuestas add foreign key (pregunta_id) references preguntas(id);


-- 5. Agrega datos, 5 usuarios y 5 preguntas, la primera pregunta debe estar contestada dos veces correctamente 
-- por distintos usuarios, la pregunta 2 debe estar contestada correctamente sólo por un usuario,
-- y las otras 2 respuestas deben estar incorrectas. (1 punto)
--    	a. Contestada correctamente significa que la respuesta indicada en la tabla respuestas es exactamente
--		igual al texto indicado en la tabla de preguntas.

insert into preguntas (pregunta, respuesta_correcta) values
    ('¿Cuanto es la raiz cuadrada de 16?', 4),
    ('¿En que año se declara la independencia de chile', 1818),
    ('¿Cual es el simbolo quimico de sodio', 'Na'),
    ('¿Cuantos segundos tiene una hora', 3600),
    ('¿Como se llamo el anterior presidente de chile', 'Sebastian Piñera');

insert into usuarios (nombre, edad) values 
    ('Ana Lizandro', 16),
    ('Gabriel Romero', 13),
    ('Juan Osorio', 15),
    ('Yesica Farias', 14),
    ('Laura Tapia', 16);

insert into respuestas(respuesta, usuario_id, pregunta_id) values 
    ('4', 3, 1),
    ('1818', 1, 2),
    ('4', 5, 1),
    ('Sod', 4, 3),
	('3600', 3, 4),
	('Na', 2, 3),
    ('360', 2, 4);

select * from preguntas;
select * from respuestas;
select * from usuarios;

-- 6. Cuenta la cantidad de respuestas correctas totales por usuario (independiente de la pregunta). (1 punto)
	--select * from preguntas p inner join respuestas r on r.pregunta_id=p.id order by p.id;
	--insert into respuestas(respuesta, usuario_id, pregunta_id) values ('Sebastian Piñera', 4, 5);
	--select * from preguntas p inner join respuestas r on r.pregunta_id=p.id inner join usuarios u on r.usuario_id=u.id order by p.id;

select u.nombre, count (r.respuesta) as respuestas_correctas from preguntas p inner join respuestas r on r.pregunta_id=p.id inner join usuarios u on r.usuario_id=u.id where r.respuesta=p.respuesta_correcta group by u.id;


-- 7. Por cada pregunta, en la tabla preguntas, cuenta cuántos usuarios tuvieron la respuesta correcta. (1 punto)
	--select * from preguntas p inner join respuestas r on r.pregunta_id=p.id;

select p.id, pregunta, count(r.respuesta) as respuestas_correctas from preguntas p inner join respuestas r on r.pregunta_id=p.id where p.respuesta_correcta=r.respuesta group by p.id;


-- 8. Implementa borrado en cascada de las respuestas al borrar un usuario y borrar el primer usuario para probar la implementación. (1 punto)
alter table respuestas drop constraint respuestas_usuario_id_fkey;
alter table respuestas add constraint respuestas_usuario_id_fkey foreign key (usuario_id) references usuarios(id) on delete cascade;

select * from respuestas r left join usuarios u on u.id=r.usuario_id order by u.id;
select * from respuestas r left join usuarios u on u.id=r.usuario_id where u.id=1;

delete from usuarios where id=1;

select * from usuarios;
select * from respuestas;
select * from respuestas order by usuario_id
insert into usuarios (id, nombre, edad) values (1,'Ana Lizandro', 21);
insert into respuestas(respuesta, usuario_id, pregunta_id) values ('4', 3, 1);


-- 9. Crea una restricción que impida insertar usuarios menores de 18 años en la base de datos.(1 punto)
		
		--- esta informacion es de otro compañero
		--ALTER TABLE usuarios alter column edad add check(edad>=18);
		--alter table usuarios add constraint CK_mayor_edad check (edad>=18);

-- asi la hice yo y tengo una duda con respecto al del compañero
-- es necesario la primera linea del compañero o no, o puede ser de una de las 2 formas 

alter table usuarios add constraint CK_mayor_de_edad check (edad>=18);

	-- se modifican las edades ya que no m permite crear la restriccion porque son menor a 18
update usuarios set edad=18 where edad=14 or edad=13;
update usuarios set edad=19 where edad=15;
update usuarios set edad=20 where edad=16;
insert into usuarios (nombre, edad) values('yesenia', 15);

select * from usuarios;


-- 10. Altera la tabla existente de usuarios agregando el campo email con la restricción de único.(1 punto)
alter table usuarios add email varchar(60) unique;

update usuarios set email='usuario1@1.com' where id=1;
update usuarios set email='usuario1@1.com' where id=2;

select * from usuarios;
